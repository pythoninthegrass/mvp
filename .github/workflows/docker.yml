name: Publish Docker images

on:
  push:
    branches:
      - 'main'
      - 'master'
    tags:
      - '*.*.*'
    paths:
      - 'Dockerfile*'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'requirements.txt'
      - '**.py'
      - '**.sh'
      - '.dockerignore'
      - '.env.example'
      - '.github/workflows/**'
  workflow_dispatch:
  # workflow_run:
  #   workflows: ["Run pytest"]
  #   types:
  #     - completed

env:
  REGISTRY_URL: ${{ vars.REGISTRY_URL }}
  REGISTRY_USER: ${{ vars.REGISTRY_USER }}

jobs:
  push_to_registry:
    name: Push Docker image to container registry
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: [Dockerfile]
    concurrency:
      # group: ${{ github.workflow }}-${{ matrix.dockerfile }}-${{ github.event.workflow_run.head_branch || github.ref }}
      group: ${{ github.workflow }}-${{ matrix.dockerfile }}-${{ github.head_ref || github.ref }}
      cancel-in-progress: true
    permissions:
      packages: write
      contents: read
      actions: read
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set password by container registry
        run: |
          case "${{ env.REGISTRY_URL }}" in
            "ghcr.io")
              echo "REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
              ;;
            "*.dkr.ecr.*.amazonaws.com")
              echo "Using AWS ECR - will authenticate in a separate step" >> $GITHUB_STEP_SUMMARY
              ;;
            "gcr.io")
              echo "Using GCR - will authenticate in a separate step" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              if [ -n "${{ secrets.REGISTRY_PASS }}" ]; then
                echo "REGISTRY_PASS=${{ secrets.REGISTRY_PASS }}" >> $GITHUB_ENV
              else
                echo "REGISTRY_PASS secret is not set and registry is not recognized. Exiting..."
                exit 1
              fi
              ;;
          esac

      - name: Configure AWS Credentials
        if: contains(env.REGISTRY_URL, '.dkr.ecr.')
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        if: contains(env.REGISTRY_URL, '.dkr.ecr.')
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Authenticate to Google Cloud
        if: env.REGISTRY_URL == 'gcr.io'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Log into container registry
        if: >
          env.REGISTRY_URL != '*.dkr.ecr.*.amazonaws.com'
          && env.REGISTRY_URL != 'gcr.io'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASS }}

      - name: Extract image name from Dockerfile
        id: image_name
        run: |
          IMAGE=$(grep "LABEL org.opencontainers.image.title" ${{ matrix.dockerfile }} | cut -d'"' -f2)
          echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_URL }}/${{ env.REGISTRY_USER }}/${{ steps.image_name.outputs.IMAGE }}
          tags: |
            type=raw,value=latest,enable=${{ endsWith(github.ref, 'main') || endsWith(github.ref, 'master') }}
            type=ref,event=branch,enable=${{ !endsWith(github.ref, 'main') && !endsWith(github.ref, 'master') }}
            type=semver,pattern={{version}}
          flavor: |
            latest=false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64/v8
          cache-from: type=registry,ref=${{ steps.meta.outputs.tags }}
          cache-to: type=registry,ref=${{ steps.meta.outputs.tags }},mode=max
