#!/usr/bin/env bash

# shellcheck disable=SC2181

# TODO: hard-coded asdf path interferes with `asdf local`
# export PATH="$HOME/.local/bin:$HOME/.asdf/bin:$HOME/.asdf/shims:$PATH"

# macos default path
# export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" || source /etc/profile

# ubuntu default path
# export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"

# update pyproject.toml and poetry.lock
poetry_update() {
    # check if poetry-plugin-up installed
    up_installed=$(poetry self show plugins 2>/dev/null | awk '/poetry-plugin-up/ {print $2}')
    # if up_installed var is empty then install poetry-plugin-up
    [[ -z "$up_installed" ]] && poetry self add poetry-plugin-up 2>/dev/null
    # update poetry dependencies
    poetry up 2>/dev/null
    [[ $? -eq 0 ]] && echo "poetry dependencies updated" || echo "poetry dependencies update failed"
}

# export requirements.txt
export_reqs() {
    poetry export -f requirements.txt --output requirements.txt --without-hashes 2>/dev/null
    [[ $? -eq 0 ]] && echo "requirements.txt exported" || echo "requirements.txt export failed"
}

# case statement to choose input arguments
case "$1" in
  	install)
		# Build the environment
		sh -c "make install"
		;;
    run)
        # Run the playbook
        ansible-playbook \
            -i ./ansible/hosts \
            ./ansible/playbook.yml
        ;;
    run-dev)
        # Run the playbook with tags and debug
        ansible-playbook \
            -i ./ansible/hosts \
            ./ansible/playbook.yml \
            --tags test,qa -vvv
        ;;
    bump-deps)
        # Update dependencies
        poetry_update
        ;;
    export-reqs)
        # Export requirements.txt
        export_reqs
        ;;
    install-precommit)
        # Install pre-commit hooks
        pre-commit install
        ;;
    update-precommit)
        # Update pre-commit hooks
        pre-commit autoupdate
        ;;
  	release)
		# Build and publish the app
		sh -c "make release"
		;;
    test)
        # Run tests
        sh -c "make test"
        ;;
  	*)
		echo $"Usage: $0 <install|run|run-dev|install-precommit|update-precommit|release|test>"
		exit 1
esac
